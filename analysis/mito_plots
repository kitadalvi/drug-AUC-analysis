## ----setup, include=FALSE---------------------
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(edgeR)
library(limma)
#loading in count data
countdata <- read.delim("/Users/dalvinikita/Documents/Drug Response Analysis/countsmatrix.tsv", check.names = FALSE, stringsAsFactors = FALSE)
sampleinfo <- read.delim("/Users/dalvinikita/Documents/Drug Response Analysis/SampleInfo.txt", check.names=FALSE, stringsAsFactors = TRUE)
y <- DGEList(counts=countdata[,3:14], genes = countdata[,2])


## ----echo=FALSE-------------------------------
batch <- factor(c(1,1,1,1,1,1,2,2,2,2,2,2))
Mitomycin <- sampleinfo$Mitomycin


## ---------------------------------------------
design <- model.matrix(~batch+Mitomycin)


## ---------------------------------------------
is_full_rank <- is.fullrank(design)
print(is_full_rank)


## ---------------------------------------------
#filtering to remove low counts
keep <- filterByExpr(y, design = design)
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE]

#normalizing library sizes
y <- calcNormFactors(y)

#fit GLMs
y <- estimateDisp(y, design, robust=TRUE)


## ---------------------------------------------
my_cpm <- cpm(y, normalized.lib.sizes=TRUE,log = TRUE)
rownames(my_cpm)<- y$genes$genes


## ---------------------------------------------
#fitting the GLM model
fit <- glmFit(y, design)

#Define Mitomycin AUC values as factor of interest in design matrix for correlation analysis 
lrt<- glmLRT(fit, coef=3)

#Retrieve significantly correlated genes using topTags, sorting by p-value
sig_genes <- topTags(lrt, p.value=0.05, n=500)
sig_genes[0:10,]


## ----include=FALSE----------------------------
write.table(sig_genes, quote=F, row.names=F, col.names = TRUE, file='/Users/dalvinikita/Documents/Drug Response Analysis/mitomycin_topGenes.txt', sep='\t')


## ----echo=FALSE, warning=FALSE, message=FALSE----
#creating dataframe of log(CPM) with gene names as columns 
#adding gene expression data 
genes_to_add <- c(sig_genes$table$genes)

# Create a new dataframe to store selected rows as columns
sig_genes_cpm <- data.frame(Mitomycin, check.names = FALSE)

# Loop through each row name in row_names_to_select
for (gene in genes_to_add) {
  # Extract the row based on row name from dataframe A
  cpm_data <- c(my_cpm[c(gene),])
  col_data <- t(cpm_data)
  col_data <- t(col_data)
  rownames(col_data)<- NULL
  sig_genes_cpm[gene]<- col_data[,1]
}

# Add column to define batch each sample was sequenced in
sig_genes_cpm["Batch"]<- batch

#Creating plots
library(ggpubr)

old_options <- options(ggpubr.parse_aes = FALSE)

p1 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y = 'IGFL2', 
                title="IGFL2", 
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "lm", color = "black", se=F) +
  theme_linedraw()
  

p2 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y = 'MYO3A', 
                title="MYO3A", 
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p3 <- ggscatter(sig_genes_cpm, 
                x ='Mitomycin', 
                y = 'LHFP', 
                title="LHFP", 
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p4 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y ="LRRTM1", 
                title="LRRTM1", 
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p5 <- ggscatter(sig_genes_cpm, 
                x ='Mitomycin', 
                y ="SNORD3A", 
                title="SNORD3A",
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p6 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y ="DSG3", 
                title="DSG3", 
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p7 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y ="HEPH", 
                title="HEPH",
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p8 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y ="ISL1",
                title="ISL1",
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p9 <- ggscatter(sig_genes_cpm, 
                x = 'Mitomycin', 
                y ="STXBP5L", 
                title="STXBP5L",
                xlab="response (AUC)", 
                ylab= "log(cpm)",
                color='Batch',
                cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

p10 <- ggscatter(sig_genes_cpm, 
                 x = 'Mitomycin', 
                 y ="TMPRSS13", 
                 title="TMPRSS13",
                 xlab="response (AUC)",
                 ylab= "log(cpm)",
                 color='Batch',
                 cor.coef = TRUE, cor.method = "pearson") +
  geom_smooth(method = "glm", color = "black", se=F)+
  theme_linedraw()

options(old_options)

#Arrange plots
ggarrange(p1,p2, ncol=2, nrow=1)
ggarrange(p3,p4, ncol=2, nrow=1)
ggarrange(p5,p6, ncol=2, nrow=1)
ggarrange(p7,p8, ncol=2, nrow=1)
ggarrange(p9,p10, ncol=2, nrow=1)

